import os
import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import os
from dotenv import load_dotenv
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

questions = {
    "A0": [
        {
            "question": "I ___ John.",
            "options": ["am", "is", "are", "be"],
            "correct": "am"
        },
        {
            "question": "You ___ a student.",
            "options": ["am", "is", "are", "be"],
            "correct": "are"
        },
        {
            "question": "This ___ a cat.",
            "options": ["am", "is", "are", "be"],
            "correct": "is"
        },
        {
            "question": "He ___ my friend.",
            "options": ["am", "is", "are", "be"],
            "correct": "is"
        },
        {
            "question": "We ___ happy.",
            "options": ["am", "is", "are", "be"],
            "correct": "are"
        }
    ],
    "A1": [
        {
            "question": "What ___ your name?",
            "options": ["are", "is", "am", "be"],
            "correct": "is"
        },
        {
            "question": "She ___ TV every evening.",
            "options": ["watch", "watches", "watching", "is watch"],
            "correct": "watches"
        },
        {
            "question": "We ___ students.",
            "options": ["are", "is", "am", "be"],
            "correct": "are"
        },
        {
            "question": "They ___ from Spain.",
            "options": ["are", "is", "am", "be"],
            "correct": "are"
        },
        {
            "question": "___ you like coffee?",
            "options": ["Are", "Do", "Does", "Is"],
            "correct": "Do"
        }
    ],
    "A2": [
        {
            "question": "I ___ to the cinema last weekend.",
            "options": ["go", "went", "going", "goes"],
            "correct": "went"
        },
        {
            "question": "She ___ been to Paris.",
            "options": ["has", "have", "had", "is"],
            "correct": "has"
        },
        {
            "question": "I ___ play football tomorrow.",
            "options": ["will", "am", "going", "do"],
            "correct": "will"
        },
        {
            "question": "He's ___ than his brother.",
            "options": ["tall", "taller", "tallest", "more tall"],
            "correct": "taller"
        },
        {
            "question": "This is ___ interesting book.",
            "options": ["a", "an", "the", "‚Äî"],
            "correct": "an"
        }
    ],
    "B1": [
        {
            "question": "If I ___ rich, I would travel the world.",
            "options": ["am", "was", "were", "had been"],
            "correct": "were"
        },
        {
            "question": "By the time we arrived, the movie ___ started.",
            "options": ["has", "had", "was", "is"],
            "correct": "had"
        },
        {
            "question": "I'm not used to ___ in public.",
            "options": ["speak", "speaking", "spoke", "have spoken"],
            "correct": "speaking"
        },
        {
            "question": "The book ___ last year was very successful.",
            "options": ["published", "was published", "that published", "publishing"],
            "correct": "published"
        },
        {
            "question": "She suggested ___ for a walk.",
            "options": ["to go", "going", "go", "went"],
            "correct": "going"
        }
    ],
    "B2": [
        {
            "question": "The project ___ completed by next month.",
            "options": ["will be", "will have been", "is", "has been"],
            "correct": "will have been"
        },
        {
            "question": "I wish I ___ harder for the exam.",
            "options": ["studied", "would study", "had studied", "study"],
            "correct": "had studied"
        },
        {
            "question": "It's high time we ___ going.",
            "options": ["start", "started", "would start", "have started"],
            "correct": "started"
        },
        {
            "question": "No sooner ___ home than it started to rain.",
            "options": ["I had arrived", "had I arrived", "I arrived", "did I arrive"],
            "correct": "had I arrived"
        },
        {
            "question": "She's the kind of person ___ always helps others.",
            "options": ["who", "which", "whose", "whom"],
            "correct": "who"
        }
    ],
    "C1": [
        {
            "question": "Had I known about the problem, I ___ it earlier.",
            "options": ["would solve", "had solved", "would have solved", "solved"],
            "correct": "would have solved"
        },
        {
            "question": "Not only ___ the exam, but she also got the highest score.",
            "options": ["she passed", "did she pass", "she did pass", "passed she"],
            "correct": "did she pass"
        },
        {
            "question": "The government ___ to have misled the public.",
            "options": ["is alleged", "alleges", "is alleging", "alleged"],
            "correct": "is alleged"
        },
        {
            "question": "It's imperative that he ___ immediately.",
            "options": ["responds", "respond", "will respond", "would respond"],
            "correct": "respond"
        },
        {
            "question": "She ___ working there for ten years before she was promoted.",
            "options": ["has been", "had been", "was", "would have been"],
            "correct": "had been"
        }
    ],
    "C2": [
        {
            "question": "Seldom ___ such an impressive performance.",
            "options": ["I have seen", "have I seen", "I saw", "did I see"],
            "correct": "have I seen"
        },
        {
            "question": "The manuscript, along with the illustrations, ___ to the publisher yesterday.",
            "options": ["was sent", "were sent", "has been sent", "have been sent"],
            "correct": "was sent"
        },
        {
            "question": "Should you ___ any assistance, please do not hesitate to contact us.",
            "options": ["require", "requires", "required", "requiring"],
            "correct": "require"
        },
        {
            "question": "Only when thoroughly ___ did I realize its significance.",
            "options": ["examined the document", "examining the document", "did I examine the document",
                        "I examined the document"],
            "correct": "examining the document"
        },
        {
            "question": "He is one of those scientists who ___ dedicated to finding a cure.",
            "options": ["is", "are", "was", "were"],
            "correct": "are"
        }
    ]
}

user_data = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    user = update.effective_user
    await update.message.reply_text(
        f"–ô–æ, {user.first_name}! ‚úåÔ∏è –ú–µ–Ω—è –∑–æ–≤—É—Ç Jony, –∏ —è —Ç—É—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –∫—Ä—É—Ç –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º! üá¨üáßüî•\n\n"
        "–Ø –∑–∞–¥–∞–º —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ –º—ã —É–∑–Ω–∞–µ–º, –≥–¥–µ —Ç—ã ‚Äî –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –Ω–æ–≤–∏—á–æ–∫ (A0) –∏–ª–∏ —É–∂–µ –ø–æ—á—Ç–∏ –Ω–æ—Å–∏—Ç–µ–ª—å (C2)! üòé\n"
        "–ì–æ—Ç–æ–≤? –¢–æ–≥–¥–∞ –∂–º–∏ /test –∏ –ø–æ–µ—Ö–∞–ª–∏! üöÄ"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /help."""
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/test - –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )


async def start_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç."""
    user_id = update.effective_user.id

    user_data[user_id] = {
        "current_level": "A0",
        "correct_answers": 0,
        "questions_asked": 0,
        "correct_per_level": {},
        "current_question_index": 0
    }

    await send_question(update, context)


async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user_id = update.effective_user.id

    if user_id not in user_data:
        await update.message.reply_text(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /test."
        )
        return

    current_level = user_data[user_id]["current_level"]
    current_question_index = user_data[user_id]["current_question_index"]

    if current_question_index >= len(questions[current_level]):
        correct_answers = user_data[user_id]["correct_answers"]
        user_data[user_id]["correct_per_level"][current_level] = correct_answers

        if correct_answers >= 3:
            next_level = get_next_level(current_level)
            if next_level:
                user_data[user_id]["current_level"] = next_level
                user_data[user_id]["correct_answers"] = 0
                user_data[user_id]["current_question_index"] = 0

                await update.effective_message.reply_text(
                    f"–í—ã —É—Å–ø–µ—à–Ω–æ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å —É—Ä–æ–≤–Ω–µ–º {current_level}! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Ä–æ–≤–Ω—é {next_level}."
                )

                await send_question(update, context)
            else:
                await show_results(update, context)
        else:
            await show_results(update, context)
        return

    question_data = questions[current_level][current_question_index]
    question_text = f"–í–æ–ø—Ä–æ—Å {current_question_index + 1}/{len(questions[current_level])} (–£—Ä–æ–≤–µ–Ω—å {current_level}):\n\n{question_data['question']}"

    keyboard = []
    for option in question_data['options']:
        keyboard.append([InlineKeyboardButton(option, callback_data=f"answer_{option}")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.effective_message.reply_text(question_text, reply_markup=reply_markup)


def get_next_level(current_level):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ."""
    levels = ["A0","A1", "A2", "B1", "B2", "C1", "C2"]
    try:
        current_index = levels.index(current_level)
        if current_index < len(levels) - 1:
            return levels[current_index + 1]
    except ValueError:
        pass
    return None


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å –æ—Ç–≤–µ—Ç–∞–º–∏."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    if user_id not in user_data:
        await query.edit_message_text(
            text="–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /test."
        )
        return

    current_level = user_data[user_id]["current_level"]
    current_question_index = user_data[user_id]["current_question_index"]
    question_data = questions[current_level][current_question_index]

    user_answer = query.data.replace("answer_", "")
    correct_answer = question_data["correct"]

    if user_answer == correct_answer:
        user_data[user_id]["correct_answers"] += 1
        result_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    else:
        result_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"

    await query.edit_message_text(
        text=f"{query.message.text}\n\n{result_text}"
    )

    user_data[user_id]["questions_asked"] += 1
    user_data[user_id]["current_question_index"] += 1

    await send_question(update, context)


async def show_results(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞."""
    user_id = update.effective_user.id

    if user_id not in user_data:
        await update.effective_message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /test."
        )
        return

    correct_per_level = user_data[user_id]["correct_per_level"]
    user_level = "A0"

    levels = ["A0","A1", "A2", "B1", "B2", "C1", "C2"]
    for level in reversed(levels):
        if level in correct_per_level and correct_per_level[level] >= 3:
            user_level = level
            break

    level_descriptions = {
        "A0": "–ù—É–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å (Beginner)",
        "A1": "–ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (Elementary)",
        "A2": "–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (Pre-Intermediate)",
        "B1": "–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (Intermediate)",
        "B2": "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ (Upper-Intermediate)",
        "C1": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å (Advanced)",
        "C2": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–ª–∞–¥–µ–Ω–∏–µ (Proficiency)"
    }

    results_text = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:\n\n"
    for level in levels:
        if level in correct_per_level:
            correct = correct_per_level[level]
            total = len(questions[level])
            percentage = (correct / total) * 100
            results_text += f"–£—Ä–æ–≤–µ–Ω—å {level}: {correct}/{total} ({percentage:.1f}%)\n"

    results_text += f"\nüèÜ –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {user_level} - {level_descriptions[user_level]}\n\n"

    recommendations = {
        "A0": "–ë—Ä–æ, –Ω—É —Ç—ã –≤–æ–æ–±—â–µ —Å –Ω—É–ª—è! üòÖ –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –≤—Å–µ —Å —á–µ–≥–æ-—Ç–æ –Ω–∞—á–∏–Ω–∞—é—Ç. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ —Å–¥–∞–≤–∞—Ç—å—Å—è! –ù–∞—á–Ω–∏ —Å –±–∞–∑–æ–≤—ã—Ö —Å–ª–æ–≤ –∏ –ø—Ä–æ—Å—Ç—ã—Ö —Ñ—Ä–∞–∑. –ê –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ª–µ–≥–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –∑–∞–ª–µ—Ç–∞–π –∫ –Ω–∞–º: https://t.me/ENGFORCHAINIKIO",

        "A1": "–ù—É, —Ç—ã —É–∂–µ –Ω–µ –ø–æ–ª–Ω—ã–π –Ω–æ–ª—å, –Ω–æ —Ä–∞–±–æ—Ç—ã –µ—â–µ –º–Ω–æ–≥–æ! üòÜ –°–æ–≤–µ—Ç: –ø–æ–¥—Ç—è–Ω–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É (to be, present simple) –∏ —É—á–∏ –±–∞–∑–æ–≤—ã–µ —Å–ª–æ–≤–∞. –ö—Ä—É—Ç—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∂–¥—É—Ç —Ç–µ–±—è –∑–¥–µ—Å—å: https://t.me/ENGFORCHAINIKIO",

        "A2": "–û—Ç–ª–∏—á–Ω–æ! –¢—ã —É–∂–µ –Ω–µ —á–∞–π–Ω–∏–∫, –Ω–æ –¥–æ —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –µ—â–µ –¥–∞–ª–µ–∫–æ. üìö –°–æ–≤–µ—Ç: —É—á–∏ –≤—Ä–µ–º–µ–Ω–∞, —Ä–∞—Å—à–∏—Ä—è–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å –∏ –ø—Ä–æ–±—É–π —á–∏—Ç–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç—ã. –ï—â–µ –±–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω—ã—Ö —à—Ç—É–∫ ‚Äî –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ: https://t.me/ENGFORCHAINIKIO",

        "B1": "–û, –∞ —Ç—ã —É–∂–µ –Ω–µ–ø–ª–æ—Ö! üöÄ –¢–µ–ø–µ—Ä—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–≤—è–∑–Ω–æ–π —Ä–µ—á—å—é –∏ –ø–∏—Å—å–º–æ–º. –ù–∞—á–Ω–∏ —Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ –∏ –ø–æ–±–æ–ª—å—à–µ –≥–æ–≤–æ—Ä–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º. –õ–∞–π—Ñ—Ö–∞–∫–∏, —Å–ª–æ–≤–∞ –∏ —Ä–∞–∑–±–æ—Ä—ã —Ñ–∏–ª—å–º–æ–≤ –∂–¥—É—Ç —Ç–µ–±—è —Ç—É—Ç: https://t.me/ENGforCHAINIKI2",

        "B2": "–¢—ã —É–∂–µ —Ä–µ–∞–ª—å–Ω–æ —Ö–æ—Ä–æ—à! üí™ –¢–µ–ø–µ—Ä—å –ø–æ—Ä–∞ —É–≥–ª—É–±–ª—è—Ç—å—Å—è: —É—á–∏ –∏–¥–∏–æ–º—ã, —Ñ—Ä–∞–∑–æ–≤—ã–µ –≥–ª–∞–≥–æ–ª—ã –∏ —Ä–∞–∑–≤–∏–≤–∞–π –±–µ–≥–ª–æ—Å—Ç—å —Ä–µ—á–∏. –ü—Ä–æ–∫–∞—á–∏–≤–∞–π —Å–µ–±—è –µ—â–µ –±–æ–ª—å—à–µ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ: https://t.me/ENGforCHAINIKI2",

        "C1": "–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —É–∂–µ –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç! üî• –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–µ –ø—Ä–æ—Å—Ç–æ —É—á–∏—Ç—å—Å—è, –∞ –¥–µ–ª–∏—Ç—å—Å—è –∑–Ω–∞–Ω–∏—è–º–∏, –¥–∞–≤–∞–π —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å! –ú—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç—ã –∫ –Ω–æ–≤—ã–º –∞–≤—Ç–æ—Ä–∞–º, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º –∏ –ø—Ä–æ—Å—Ç–æ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–∞–º. –ù–∞–ø–∏—à–∏ –Ω–∞–º: https://t.me/Yul_ewq",

        "C2": "–¢—ã —É–∂–µ –º–∞—Å—Ç–µ—Ä –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ! üëë –ü–æ—á–µ–º—É –±—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∑–Ω–∞–Ω–∏—è –¥—Ä—É–≥–∏–º? –ú—ã –∏—â–µ–º –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∫—É—Ä—Å—ã –∏ –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º —É—á–∏—Ç—å—Å—è. –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ ‚Äî –ø–∏—à–∏, –æ–±—Å—É–¥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ: https://t.me/Yul_ewq"
    }

    results_text += recommendations[user_level]

    await update.effective_message.reply_text(results_text)

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del user_data[user_id]


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏."""
    await update.message.reply_text(
        "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("test", start_test))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_callback))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()